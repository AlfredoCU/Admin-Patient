{"version":3,"sources":["components/MessageError.js","components/Form.js","hooks/useForm.js","components/ItemAppointment.js","components/Appointments.js","containers/App.js","reportWebVitals.js","index.js"],"names":["MessageError","closeError","className","onClick","Form","createAppointment","quantityInput","useState","inputs","setInputs","target","name","value","useForm","patient","doctor","date","time","reason","handleInputChange","reset","error","setError","useCallback","show","onSubmit","e","preventDefault","trim","data","id","Date","getTime","type","autoComplete","onChange","placeholder","ItemAppointment","deleteA","Appointments","memo","length","map","item","App","initialState","JSON","parse","localStorage","getItem","appointments","setAppointments","useEffect","setItem","stringify","d","deleteAppointment","newData","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAEaA,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAH,OAC1B,oBAAGC,UAAU,cAAb,UACE,sBAAMC,QAAS,kBAAMF,GAAW,IAAhC,kBADF,yCCEWG,EAAO,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,kBAAwB,ECHxB,WAAyB,IAAxBC,EAAuB,uDAAP,GAAO,EACjBC,mBAASD,GADQ,mBACtCE,EADsC,KAC9BC,EAD8B,KAW7C,MAAO,CAACD,EAJkB,SAAC,GAAgB,IAAdE,EAAa,EAAbA,OAC3BD,EAAU,2BAAKD,GAAN,kBAAeE,EAAOC,KAAOD,EAAOE,UALjC,WACZH,EAAUH,KDA+BO,CAAQ,CACjDC,QAAS,GACTC,OAAQ,GACRC,KAAM,GACNC,KAAM,GACNC,OAAQ,KANmC,mBACtCV,EADsC,KAC9BW,EAD8B,KACXC,EADW,OASnBb,oBAAS,GATU,mBAStCc,EATsC,KAS/BC,EAT+B,KAWrCR,EAAwCN,EAAxCM,QAASC,EAA+BP,EAA/BO,OAAQC,EAAuBR,EAAvBQ,KAAMC,EAAiBT,EAAjBS,KAAMC,EAAWV,EAAXU,OAuB/BjB,EAAasB,uBACjB,SAAAC,GACEF,EAASE,KAEX,CAACF,IAGH,OACE,sBAAKpB,UAAU,YAAf,UACE,4CAECmB,GAAS,cAAC,EAAD,CAAcpB,WAAYA,IAEpC,uBAAMwB,SAlCK,SAAAC,GAGb,GAFAA,EAAEC,iBAGmB,KAAnBb,EAAQc,QACU,KAAlBb,EAAOa,QACS,KAAhBZ,EAAKY,QACW,KAAhBX,EAAKW,QACa,KAAlBV,EAAOU,OALT,CAWA,IAAMC,EAAI,aAAKC,IAAI,IAAIC,MAAOC,WAAcxB,GAE5CH,EAAkBwB,GAClBP,GAAS,GACTF,SAREE,GAAS,IAwBT,UACE,yDACA,uBACEW,KAAK,OACLtB,KAAK,UACLC,MAAOE,EACPoB,aAAa,MACbC,SAAUhB,EACViB,YAAY,wBAGd,wDACA,uBACEH,KAAK,OACLtB,KAAK,SACLC,MAAOG,EACPmB,aAAa,MACbC,SAAUhB,EACViB,YAAY,qCAGd,2CACA,uBACEH,KAAK,OACLtB,KAAK,OACLC,MAAOI,EACPmB,SAAUhB,IAGZ,0CACA,uBACEc,KAAK,OACLtB,KAAK,OACLC,MAAOK,EACPkB,SAAUhB,IAGZ,uDACA,0BACER,KAAK,SACLC,MAAOM,EACPiB,SAAUhB,EACViB,YAAY,oCAGd,wBAAQH,KAAK,SAAS/B,UAAU,iBAAhC,iCE/FKmC,EAAkB,SAAC,GAQzB,IAPLP,EAOI,EAPJA,GACAhB,EAMI,EANJA,QACAC,EAKI,EALJA,OACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,KACAC,EAEI,EAFJA,OACAoB,EACI,EADJA,QAEA,OACE,sBAAKpC,UAAU,cAAf,UACE,oDACkB,+BAAO4B,OAEzB,sDACuB,+BAAOhB,OAE9B,qDACsB,+BAAOC,OAE7B,wCACS,+BAAOC,OAEhB,uCACQ,+BAAOC,OAEf,oDACqB,+BAAOC,OAE5B,wBACEe,KAAK,SACL/B,UAAU,wBACVC,QAAS,kBAAMmC,EAAQR,IAHzB,0BC3BOS,EAAeC,gBAAK,YAAwB,IAArBX,EAAoB,EAApBA,KAAMS,EAAc,EAAdA,QACxC,OACE,qCACE,sDACCT,EAAKY,OAAS,EACbZ,GACAA,EAAKa,KAAI,SAAAC,GAAI,OACX,cAAC,EAAD,2BAAmCA,GAAnC,IAAyCL,QAASA,IAA5BK,EAAKb,OAG7B,oDCXKc,EAAM,WACjB,IAAMC,EAAeC,KAAKC,MAAMC,aAAaC,QAAQ,kBAAoB,GADlD,EAGiB1C,mBAASsC,GAH1B,mBAGhBK,EAHgB,KAGFC,EAHE,KAKvBC,qBAAU,WACRJ,aAAaK,QAAQ,eAAgBP,KAAKQ,UAAUJ,MACnD,CAACA,IAEJ,IAAM7C,EAAoBkB,uBACxB,SAAAM,GACEsB,GAAgB,SAAAI,GAAC,4BAAQA,GAAR,CAAW1B,SAE9B,CAACsB,IAGGK,EAAoBjC,uBACxB,SAAAO,GACE,IAAM2B,EAAUP,EAAaQ,QAAO,SAAAf,GAAI,OAAIA,EAAKb,KAAOA,KACxDqB,EAAgBM,KAElB,CAACP,EAAcC,IAGjB,OACE,qCACE,4DACA,sBAAKjD,UAAU,YAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAMG,kBAAmBA,MAE3B,qBAAKH,UAAU,eAAf,SACE,cAACqC,EAAD,CAAcV,KAAMqB,EAAcZ,QAASkB,aCvBtCG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,YCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1Bb,M","file":"static/js/main.5cce8656.chunk.js","sourcesContent":["import { func } from \"prop-types\";\n\nexport const MessageError = ({ closeError }) => (\n  <p className=\"alert-error\">\n    <span onClick={() => closeError(false)}>&times;</span>\n    Todos los campos son obligatorios.\n  </p>\n);\n\nMessageError.propTypes = {\n  closeError: func.isRequired\n};\n","import { useCallback, useState } from \"react\";\nimport { func } from \"prop-types\";\nimport { useForm } from \"../hooks/useForm\";\nimport { MessageError } from \"./MessageError\";\n\nexport const Form = ({ createAppointment }) => {\n  const [inputs, handleInputChange, reset] = useForm({\n    patient: \"\",\n    doctor: \"\",\n    date: \"\",\n    time: \"\",\n    reason: \"\"\n  });\n\n  const [error, setError] = useState(false);\n\n  const { patient, doctor, date, time, reason } = inputs;\n\n  const submit = e => {\n    e.preventDefault();\n\n    if (\n      patient.trim() === \"\" ||\n      doctor.trim() === \"\" ||\n      date.trim() === \"\" ||\n      time.trim() === \"\" ||\n      reason.trim() === \"\"\n    ) {\n      setError(true);\n      return;\n    }\n\n    const data = { id: new Date().getTime(), ...inputs };\n\n    createAppointment(data);\n    setError(false);\n    reset();\n  };\n\n  const closeError = useCallback(\n    show => {\n      setError(show);\n    },\n    [setError]\n  );\n\n  return (\n    <div className=\"move-form\">\n      <h2>Crear cita</h2>\n\n      {error && <MessageError closeError={closeError} />}\n\n      <form onSubmit={submit}>\n        <label>Nombre del paciente:</label>\n        <input\n          type=\"text\"\n          name=\"patient\"\n          value={patient}\n          autoComplete=\"off\"\n          onChange={handleInputChange}\n          placeholder=\"Agregar paciente...\"\n        />\n\n        <label>Doctor responsable:</label>\n        <input\n          type=\"text\"\n          name=\"doctor\"\n          value={doctor}\n          autoComplete=\"off\"\n          onChange={handleInputChange}\n          placeholder=\"Agregar al doctor responsable...\"\n        />\n\n        <label>Fecha:</label>\n        <input\n          type=\"date\"\n          name=\"date\"\n          value={date}\n          onChange={handleInputChange}\n        />\n\n        <label>Hora:</label>\n        <input\n          type=\"time\"\n          name=\"time\"\n          value={time}\n          onChange={handleInputChange}\n        />\n\n        <label>Motivo de la cita:</label>\n        <textarea\n          name=\"reason\"\n          value={reason}\n          onChange={handleInputChange}\n          placeholder=\"Agregar el motivo de la cita...\"\n        ></textarea>\n\n        <button type=\"submit\" className=\"button primary\">\n          Agregar Cita\n        </button>\n      </form>\n    </div>\n  );\n};\n\nForm.propTypes = {\n  createAppointment: func.isRequired\n};\n","import { useState } from \"react\";\n\nexport const useForm = (quantityInput = {}) => {\n  const [inputs, setInputs] = useState(quantityInput);\n\n  const reset = () => {\n    setInputs(quantityInput);\n  };\n\n  const handleInputChange = ({ target }) => {\n    setInputs({ ...inputs, [target.name]: target.value });\n  };\n\n  return [inputs, handleInputChange, reset];\n};\n","import { number, string, func } from \"prop-types\";\n\nexport const ItemAppointment = ({\n  id,\n  patient,\n  doctor,\n  date,\n  time,\n  reason,\n  deleteA\n}) => {\n  return (\n    <div className=\"appointment\">\n      <p>\n        NÃºmero de cita: <span>{id}</span>\n      </p>\n      <p>\n        Nombre del paciente: <span>{patient}</span>\n      </p>\n      <p>\n        Doctor responsable: <span>{doctor}</span>\n      </p>\n      <p>\n        Fecha: <span>{date}</span>\n      </p>\n      <p>\n        Hora: <span>{time}</span>\n      </p>\n      <p>\n        Motivo de la cita: <span>{reason}</span>\n      </p>\n      <button\n        type=\"button\"\n        className=\"button primary delete\"\n        onClick={() => deleteA(id)}\n      >\n        Eliminar\n      </button>\n    </div>\n  );\n};\n\nItemAppointment.propTypes = {\n  id: number.isRequired,\n  patient: string.isRequired,\n  doctor: string.isRequired,\n  date: string.isRequired,\n  time: string.isRequired,\n  reason: string.isRequired,\n  deleteA: func.isRequired\n};\n","import { memo } from \"react\";\nimport { arrayOf, shape, number, string, func } from \"prop-types\";\nimport { ItemAppointment } from \"./ItemAppointment\";\n\nexport const Appointments = memo(({ data, deleteA }) => {\n  return (\n    <>\n      <h2>Administra tus citas</h2>\n      {data.length > 0 ? (\n        data &&\n        data.map(item => (\n          <ItemAppointment key={item.id} {...item} deleteA={deleteA} />\n        ))\n      ) : (\n        <h2>No hay citas</h2>\n      )}\n    </>\n  );\n});\n\n// En React -> array, object y any son invalidos.\nAppointments.propTypes = {\n  data: arrayOf(\n    shape({\n      id: number.isRequired,\n      patient: string.isRequired,\n      doctor: string.isRequired,\n      date: string.isRequired,\n      time: string.isRequired,\n      reason: string.isRequired\n    })\n  ).isRequired,\n  deleteA: func.isRequired\n};\n","import { Form, Appointments } from \"../components\";\nimport { useState, useCallback, useEffect } from \"react\";\n\nexport const App = () => {\n  const initialState = JSON.parse(localStorage.getItem(\"appointments\")) || [];\n\n  const [appointments, setAppointments] = useState(initialState);\n\n  useEffect(() => {\n    localStorage.setItem(\"appointments\", JSON.stringify(appointments));\n  }, [appointments]);\n\n  const createAppointment = useCallback(\n    data => {\n      setAppointments(d => [...d, data]);\n    },\n    [setAppointments]\n  );\n\n  const deleteAppointment = useCallback(\n    id => {\n      const newData = appointments.filter(item => item.id !== id);\n      setAppointments(newData);\n    },\n    [appointments, setAppointments]\n  );\n\n  return (\n    <>\n      <h1>Administrador de pacientes</h1>\n      <div className=\"container\">\n        <div className=\"content-form\">\n          <Form createAppointment={createAppointment} />\n        </div>\n        <div className=\"content-list\">\n          <Appointments data={appointments} deleteA={deleteAppointment} />\n        </div>\n      </div>\n    </>\n  );\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./containers/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./styles/normalize.css\";\nimport \"./styles/index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}